import 'dart:ui' as dart_ui;

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:generic_shop_app_content/content.dart';

/// A builder for inserting widgets above the [Navigator].
///
/// The responsibilities of this builder widget are:
///
/// - Implements the user app access logic (cookies and display handling)
/// - Manage the color of the system status and navigation bars
/// - Dinamically adjust text size according to the screen size
/// - Provide access point to the debug route with QA builds
///
class GsaViewBuilder extends StatefulWidget {
  // ignore: public_member_api_docs
  const GsaViewBuilder(
    this.child, {
    super.key,
  });

  /// Route generated by the [MaterialApp.home] or [MaterialApp.onGenerateRoute] property.
  ///
  final Widget child;

  @override
  State<GsaViewBuilder> createState() => _GsaViewBuilderState();
}

class _GsaViewBuilderState extends State<GsaViewBuilder> {
  late Brightness _specifiedBrightness;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // Handle platform theme brightness changes.
    try {
      _specifiedBrightness;
    } catch (e) {
      _specifiedBrightness = GsaPlugin.of(context).theme.brightness;
    }
    if (GsaServiceCacheEntry.themeBrightness.value == null) {
      final systemBrightness = PlatformDispatcher.instance.platformBrightness;
      if (systemBrightness != _specifiedBrightness) {
        _specifiedBrightness = systemBrightness;
        GsaPlugin.of(context).theme.brightness = systemBrightness;
        final ancestorState = context.findAncestorStateOfType<GsaState>();
        if (ancestorState == null) {
          throw Exception(
            'Ancestor state GsaState not found.',
          );
        }
        WidgetsBinding.instance.addPostFrameCallback(
          (_) {
            ancestorState.setState(() {});
          },
        );
      }
    }
  }

  /// Variable holding the current tap count in the last 3 seconds.
  ///
  /// If the QA build mode is enabled, the "debug" route will be opened on 10 taps in 3 seconds.
  ///
  int _recordedNumberOfTaps = 0;

  final _activePointerIds = <int>{};

  @override
  Widget build(BuildContext context) {
    final bool isDemoImplementation = context.findAncestorStateOfType<GsaState>()?.widget.navigatorKey != null;
    return AnnotatedRegion<SystemUiOverlayStyle>(
      value: GsaPlugin.of(context).theme.systemUiOverlayStyle,
      child: LayoutBuilder(
        builder: (context, constraints) {
          return GsaThemeWrapper(
            theme: GsaPlugin.of(context).theme,
            screenSize: constraints.biggest,
            viewScale: MediaQuery.of(context).textScaler.scale(1),
            child: MediaQuery(
              data: MediaQuery.of(context).copyWith(
                textScaler: GsaPlugin.of(context).theme.textScaler(context: context),
              ),
              child: Listener(
                child: ScrollConfiguration(
                  behavior: isDemoImplementation ? ScrollBehavior() : const _TouchScrollBehavior(),
                  child: Stack(
                    children: [
                      widget.child,
                      if (GsaPlugin.of(context).overlayBuilder != null) GsaPlugin.of(context).overlayBuilder!,
                    ],
                  ),
                ),
                onPointerDown: isDemoImplementation
                    ? null
                    : (event) {
                        if (GsaConfig.qaBuild) {
                          _recordedNumberOfTaps++;
                          if (_recordedNumberOfTaps == 10) {
                            _recordedNumberOfTaps = 0;
                            const GsaRouteDebug().push();
                          } else {
                            Future.delayed(
                              const Duration(seconds: 3),
                              () {
                                if (_recordedNumberOfTaps > 0) _recordedNumberOfTaps--;
                              },
                            );
                          }
                        } else {
                          _activePointerIds.add(event.pointer);
                          if (_activePointerIds.length == 3) {
                            _recordedNumberOfTaps++;
                            if (_recordedNumberOfTaps == 4) {
                              _recordedNumberOfTaps = 0;
                              const GsaRouteDebug().push();
                            }
                          }
                        }
                      },
                onPointerUp: isDemoImplementation
                    ? null
                    : (PointerUpEvent event) {
                        _activePointerIds.remove(event.pointer);
                      },
                onPointerCancel: isDemoImplementation
                    ? null
                    : (PointerCancelEvent event) {
                        _activePointerIds.remove(event.pointer);
                      },
              ),
            ),
          );
        },
      ),
    );
  }
}

class _TouchScrollBehavior extends MaterialScrollBehavior {
  const _TouchScrollBehavior();

  @override
  Set<dart_ui.PointerDeviceKind> get dragDevices => {
        dart_ui.PointerDeviceKind.touch,
        dart_ui.PointerDeviceKind.mouse,
      };
}
