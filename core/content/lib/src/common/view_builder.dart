import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:generic_shop_app_architecture/config.dart';
import 'package:generic_shop_app_content/gsac.dart';

/// A builder for inserting widgets above the [Navigator].
///
/// The responsibilities of this builder widget are:
///
/// - Implements the user app access logic (cookies and display handling)
/// - Manage the color of the system status and navigation bars
/// - Dinamically adjust text size according to the screen size
/// - Provide access point to the debug route with QA builds
///
class GsaViewBuilder extends StatefulWidget {
  // ignore: public_member_api_docs
  const GsaViewBuilder(
    this.child, {
    super.key,
  });

  /// Route generated by the [MaterialApp.home] or [MaterialApp.onGenerateRoute] property.
  ///
  final Widget child;

  @override
  State<GsaViewBuilder> createState() => _GsaViewBuilderState();
}

class _GsaViewBuilderState extends State<GsaViewBuilder> {
  /// Property holding the value of the runtime resource allocation method.
  ///
  final _initFuture = GsaConfig.init();

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // Handle platform theme brightness changes.
    final systemBrightness = MediaQuery.of(context).platformBrightness;
    if (systemBrightness != GsaTheme.instance.platformBrightness) {
      setState(() => GsaTheme.instance.platformBrightness = systemBrightness);
    }
  }

  /// Variable holding the current tap count in the last 3 seconds.
  ///
  /// If the QA build mode is enabled, the "debug" route will be opened on 10 taps in 3 seconds.
  ///
  int _recordedNumberOfTaps = 0;

  final _activePointerIds = <int>{};

  @override
  Widget build(BuildContext context) {
    return AnnotatedRegion<SystemUiOverlayStyle>(
      value: GsaTheme.instance.systemUiOverlayStyle,
      child: MediaQuery(
        data: MediaQuery.of(context).copyWith(
          textScaler: GsaTheme.instance.textScaler(context),
        ),
        child: Listener(
          child: FutureBuilder(
            future: _initFuture,
            builder: (context, snapshot) {
              if (snapshot.connectionState != ConnectionState.done) {
                return const Material(
                  child: Center(
                    child: CircularProgressIndicator(),
                  ),
                );
              }

              if (snapshot.hasError) {
                return Material(
                  child: Center(
                    child: GsaWidgetError(
                      snapshot.error.toString(),
                    ),
                  ),
                );
              }

              return widget.child;
            },
          ),
          onPointerDown: (event) {
            if (GsaConfig.qaBuild) {
              _recordedNumberOfTaps++;
              if (_recordedNumberOfTaps == 10) {
                _recordedNumberOfTaps = 0;
                const GsaRouteDebug().push();
              } else {
                Future.delayed(
                  const Duration(seconds: 3),
                  () {
                    if (_recordedNumberOfTaps > 0) _recordedNumberOfTaps--;
                  },
                );
              }
            } else {
              _activePointerIds.add(event.pointer);
              if (_activePointerIds.length == 3) {
                _recordedNumberOfTaps++;
                if (_recordedNumberOfTaps == 4) {
                  _recordedNumberOfTaps = 0;
                  const GsaRouteDebug().push();
                }
              }
            }
          },
          onPointerUp: (PointerUpEvent event) {
            _activePointerIds.remove(event.pointer);
          },
          onPointerCancel: (PointerCancelEvent event) {
            _activePointerIds.remove(event.pointer);
          },
        ),
      ),
    );
  }
}
